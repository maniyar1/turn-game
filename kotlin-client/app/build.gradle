/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.10'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.graphics']
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'no.tornado:tornadofx:1.7.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'client.kotlin.PrimaryAppKt'
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    destinationDirectory.set(file("$rootDir/"))
    with jar
}


application {
    // Define the main class for the application.
    mainClass = 'client.kotlin.PrimaryAppKt'
}
